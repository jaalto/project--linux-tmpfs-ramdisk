#!/bin/sh
#
#   Copyright
#
#       Copyright (C) 2018-2019 Jari Aalto
#
#   License
#
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 2 of the License, or
#       (at your option) any later version.
#
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#       GNU General Public License for more details.
#
#       You should have received a copy of the GNU General Public License
#       along with this program. If not, see <http://www.gnu.org/licenses/>.
#
#  DESCRIPTION
#
#       Manages selected direcories in tmpfs RAM:
#
#       - start - Set up ramdisk and copy data from real disk.
#       - stop  - Teardown ramdisk and write data from RAM to disk
#       - sync  - Write data from RAM to disk. This is not ATOMIC
#                 operation. Some loss is inevitable if server is busy
#                 because the "bind" mounts need to be releases during
#                 the copy operations.
#
#       See also https://wiki.debian.org/ZRam
#
#   NOTES
#
#       For debugging, enable dry run test mode. To display rsync(1)
#       transfer messages, enable verbose:
#
#           /<path>/ramdisk --verbose [--test] <command>

### BEGIN INIT INFO
# Provides:          ramdisk
# Required-Start:    $local_fs
# Required-Stop:     $local_fs
# Default-Start:     S
# Default-Stop:      0 1 6
# Short-Description: Manage directories moved to tmpfs
# Description:       Manage directories moved to tmpfs
### END INIT INFO

# -----------------------------------------------------------------------
# Initial setup
# -----------------------------------------------------------------------

PATH=/bin:/usr/bin:/sbin:/usr/sbin

. /lib/lsb/init-functions

# Local variables

AUTHOR="Jari Aalto <jari.aalto@cante.net>"
VERSION="2019.0505.0751"
LICENSE="GPL-2+"
HOMEPAGE=https://github.com/jaalto/project--linux-tmpfs-ramdisk

USAGE="Usage: $(basename $0) [options] {start|stop|status|sync}"

BIN=$(basename $0)
BIN=${BIN%.sh}
CONF=/etc/default/ramdisk

# Default configuration variables unless overriden in $CONF

NICE=-20  # make rsync(1) as fast as possible

RAMDISK=/mnt/ramdisk

DIRLIST="\
/var/cache/man \
/var/tmp \
/tmp\
"

test -r $CONF && . $CONF

LOCK=$RAMDISK/ramdisk.lock

# -----------------------------------------------------------------------
# Functions
# -----------------------------------------------------------------------

Help ()
{
    echo "$USAGE

OPTIONS

-h, --help      Display help and exit.
-t, --test      Run in dry run, test mode. Only displays commands.
-v, --verbose   Turn on verbose messages
-V, --version   Display version, licence etc. and exit

DESCRIPTION

Manage select diectories in RAM. Provide command 'start' to
copy-to-RAM, command 'stop' to restore the system mounts as they were
while wriing modified files back to disk and 'sync' to snapshot
RAM-copy-to-DISK to preserve data.

Configuration: $CONF
"

    Version
}

Initialize ()
{
    # Initialize global variables

    VERBOSE="--quiet"
    VERBOSEON=

    if [ "$verbose" ]; then
        VERBOSEON="verbose"
        VERBOSE="--verbose"
    fi

    RSYNCOPT="-a --recursive --links --owner --group $VERBOSE"
    RSYNC="nice --adjustment=${NICE:--20} rsync $RSYNCOPT"
}

Version ()
{
    echo "$VERSION $LICENSE $AUTHOR $HOMEPAGE"
}

Warn ()
{
    echo "$*" >&2
}

Die ()
{
    Warn "$*"
    exit 1
}

Echo ()
{
    [ "$VERBOSEON" ] && echo "$*"
}

Sed ()
{
    # Prefix all messaged with "<binary name>: "
    [ "$VERBOSEON" ] && sed "s,^,$BIN: ,"
}

Run ()
{
    ${test:+echo} "$@"
}

IsRamdisk ()
{
    [ "$RAMDISK" ] && [ -d "$RAMDISK" ]
}

IsOverlayfs ()
{
    grep -q overlay /proc/filesystems
}

IsMountOverlay ()
{
    mount | egrep " $1 +type +\<overlay "
}

IsMountRamdiskRoot ()
{
    mount | egrep -q " $RAMDISK +type +\<tmpfs "
}

IsDirValid ()
{
    local debug

    if [ $# -gt 0 ] && [ ! "$1" ]; then
        debug="NOK: argument is empty"
        return 1
    elif [ ! "$1" ]; then
        debug="NOK: missing argument"
        return 1
    fi

    case "$1" in
        *\ *)
            debug="NOK: spaces in directory"
            return 1
            ;;
        /*) debug="OK: absolute path"
            ;;
         *) debug="NOK: non-absolute path or something else"
            return 1
            ;;
    esac

    if [ ! -d "$1" ]; then
        debug="NOK: non-existing directory"
        return 1
    fi
}

DirTopLevel ()
{
    echo "$*" |
    awk -F/ '
        {
            hash[$2]
        }
        END {
            for (name in hash)
            {
                print name;
            }
        }
    '
}

Mount ()
{
    local src=$1
    local dest=$2
    local permissions=$3

    if [ ! -d "$src" ]; then
        Warn "$BIN: (Mount) ERROR no src $src"
        return 0
    fi

    if [ ! "$dest" ]; then
        Warn "$BIN: (Mount) no dest $dest"
        return 1
    fi

    if mount | grep --quiet "$dest.overlay" ; then
        return 0  # Already mounted
    fi

    local perm

    # Default permissions for some directories

    case "$src" in
        /tmp)
            perm="a=rwx,o+t"
            ;;
    esac

    if [ "$permissions" ]; then
        perm="--mode=$permissions"
    fi

    Run install -D $perm $dest $dest.workdir $dest.overlay | Sed

    Echo "$BIN: [start] rsync $src/ $dest.overlay/"
    Run $RSYNC --delete $src/ $dest.overlay/ | Sed

    Run mount -t overlay \
        -o rw,lowerdir=$src,upperdir=$dest.overlay,workdir=$dest.workdir \
        none $dest.overlay

    Run mount -o bind $dest.overlay $src | Sed
}

Umount ()
{
    local src=$1
    local dest=$2
    local type=$3

    if [ ! "$dest" ]; then
        Warn "$BIN: (Umount) dest arguments missing"
        return 1
    fi

    if [ ! -d "$dest.overlay" ]; then
        return 0
    fi

    if [ ! -d "$src" ]; then
        Warn "$BIN: ERROR (Umount) no src $src"
        return 0
    fi

    if [ ! -d "$dest" ]; then
        Warn "$BIN: ERROR (Umount) no dest $dest"
        return 0
    fi

    if ! mount | grep --quiet $dest.overlay ; then
        return 0  # No overlay mount active
    fi

    if [ "$type" = "sync" ]; then
        # Open up bind mount and write chnages back
        Run umount -fl $src | Sed

        Echo "$bin: [sync] rsync $dest.overlay/ $src"
        Run $RSYNC $dest.overlay/ $src/ | Sed

        Run mount -o bind $dest.overlay $src | Sed
    else
        Run umount -fl $src | Sed

        Echo "$bin: [stop] rsync $dest.overlay/ $src"
        Run $RSYNC --remove-source-files --delete-after $dest.overlay/ $src/ | Sed

        Run umount -fl $dest.overlay | Sed
    fi
}

WriteRamToDisk ()
{
    local src=$1
    local dest=$2

    Umount $src $dest sync
}

MountMain ()
{
    local cmd=$1
    local dir
    local permissions
    local dest

    for dir in $DIRLIST
    do
        # <path>:<chmod-permissions>
        permissions=""

        case "$dir" in
            *:*)
                permissions=${dir#*:}
                dir=${dir%%:*}
                ;;
        esac

        dest=$RAMDISK/${dir#/}   # remove trailing slash(/)

        if ! IsDirValid "$dir"; then
            Warn "$BIN: WARN invalid directory, ignored: '$dir'"
        fi

        if [ "$cmd" = "mount" ]; then
            Mount "$dir" "$dest" "$permissions"
            Run touch "$LOCK"
        elif [ "$cmd" = "sync" ]; then
            WriteRamToDisk "$dir" "$dest"
        else
            Umount "$dir" "$dest"
            Run rm -f "$LOCK"
        fi
    done
}

StatusOverlays ()
{
    local dir

    for dir in $DIRLIST
    do
        IsMountOverlay $dir
    done
}

Status ()
{
    if IsMountRamdiskRoot ; then
        echo "$BIN: active tmpfs $RAMDISK"
    else
        echo "$BIN: deactive tmpfs $RAMDISK"
        return 1
    fi

    if [ -f "$LOCK" ]; then
        echo "$BIN: active process status $LOCK"
    else
        echo "$BIN: deactive process status. No $LOCK"
    fi

    local dir

    echo "$BIN: directories $DIRLIST"

    StatusOverlays | sed "s,^,$BIN: [mount] ,"

    return 0
}

Clean ()
{
    local dir

    IsRamdisk || return 1

    for dir in $(DirTopLevel "$DIRLIST")
    do
        dir=$RAMDISK/$dir

        if [ -d "$dir" ]; then
            Run rm -rf "$dir"
        fi
    done
}

RequireFeaturesOrDie ()
{
    if ! IsMountRamdiskRoot ; then
        Die "$BIN: ERROR tmpfs $RAMDISK not mounted, check /etc/fstab. Aborted."
    fi

    if ! IsOverlayfs ; then
        Die "$BIN: ERROR overlayfs not supported in current Kernel. Aborted."
    fi

    [ -x /usr/bin/rsync ] && return 0

    if ! which rsync > /dev/null 2>&1 ; then
        Die "$BIN: ERROR rsync(1) progam not in PATH. Aborted."
    fi
}

# -----------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------

Main ()
{
    unset verbose
    unset test

    while :
    do
        case "$1" in
            -h | --help)
                Help
                return 0
                ;;
            -t | --test)
                shift
                test=test
                ;;
            -v | --verbose)
                shift
                verbose=verbose
                ;;
            -V | --version)
                Version
                return 0
                ;;
            -*) Warn"$BIN: WARN Unknown option: $1"
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                break
                ;;
        esac
    done

    Initialize

    case "$1" in
        start)
            log_daemon_msg "Starting $BIN" "$BIN"

            if ! IsRamdisk ; then
                Die "$BIN: ERROR no mount directory $RAMDISK. Aborted."
            fi

            RequireFeaturesOrDie
            MountMain mount
            ;;
        restart | force-reload | reload | flush | sync*)
            RequireFeaturesOrDie
            MountMain sync
            :
            ;;
        stop)
            log_daemon_msg "Stopping $BIN" "$BIN"

            if [ ! -d $RAMDISK ] ; then
                return 1
            fi

            RequireFeaturesOrDie
            MountMain umount
            ;;
        status)
            RequireFeaturesOrDie
            Status
            ;;
        *)
            echo "$USAGE"
            echo "See also --help"
            exit 2
            ;;
    esac
}

Main "$@"

# End of file
